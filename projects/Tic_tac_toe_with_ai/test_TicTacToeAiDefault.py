# ********RoostGPT********
"""
Test generated by RoostGPT for test python-test using AI Type Open AI and AI Model gpt-4-0613

ROOST_METHOD_HASH=default_35ee804633
ROOST_METHOD_SIG_HASH=default_ae148bc79a

================================VULNERABILITIES================================
Vulnerability: Redundant Import (CWE-116)
Issue: The 'random' module is imported twice, which is unnecessary and could lead to confusion or errors.
Solution: Remove the duplicate import statement.

Vulnerability: Insecure Direct Object References (IDOR)
Issue: The code does not validate or sanitize input, which can lead to security vulnerabilities if the function is exposed to user inputs.
Solution: Add input validation or sanitization before using the input.

Vulnerability: Insufficient Logging & Monitoring (CWE-778)
Issue: There is no logging mechanism in the code, which can make it difficult to detect, investigate, and respond to security incidents.
Solution: Add logging to track the operation of the program and detect anomalies.

================================================================================
Scenario 1: Verifying the print statement
Details:
  TestName: test_print_statement
  Description: This test is intended to verify if the correct statement is being printed by the function.
Execution:
  Arrange: No setup is required as the function does not take any parameters.
  Act: The function default() will be invoked.
  Assert: The expected outcome is the statement "Welcome! Let's play TIC TAC TOE!" and it will be checked by capturing the output of the print statement.
Validation:
  This test is important to ensure that the function is delivering the expected user message. The correct print statement is crucial for user experience.

Scenario 2: Verifying the newline characters
Details:
  TestName: test_newline_characters
  Description: This test is intended to verify if the print statement includes newline characters at the beginning and end of the message.
Execution:
  Arrange: No setup is required as the function does not take any parameters.
  Act: The function default() will be invoked.
  Assert: The expected outcome is the statement with newline characters ("\nWelcome! Let's play TIC TAC TOE!\n") and it will be checked by capturing the output of the print statement.
Validation:
  This test is important to ensure that the function is formatting the output correctly. The inclusion of newline characters can affect the layout of the output.

Scenario 3: Verifying if any other message is printed
Details:
  TestName: test_only_expected_message
  Description: This test is intended to verify that no other message is being printed by the function apart from the expected message.
Execution:
  Arrange: No setup is required as the function does not take any parameters.
  Act: The function default() will be invoked.
  Assert: The expected outcome is just the statement "Welcome! Let's play TIC TAC TOE!" and it will be checked by capturing the output of the print statement.
Validation:
  This test is important to ensure that the function does not print any additional, unexpected messages. This could confuse the user or clutter the output.
"""

# ********RoostGPT********
import pytest
from tic_tac_toe_AI import default
from io import StringIO
import sys

class Test_TicTacToeAiDefault:

    def test_print_statement(self, capsys):
        expected_output = "Welcome! Let's play TIC TAC TOE!"
        default()
        out, err = capsys.readouterr()
        assert out.strip() == expected_output

    def test_newline_characters(self, capsys):
        expected_output = "\nWelcome! Let's play TIC TAC TOE!\n"
        default()
        out, err = capsys.readouterr()
        assert out == expected_output

    def test_only_expected_message(self, capsys):
        unexpected_output = "Unexpected Message"
        default()
        out, err = capsys.readouterr()
        assert unexpected_output not in out
