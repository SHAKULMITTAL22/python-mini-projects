# ********RoostGPT********
"""
Test generated by RoostGPT for test python-test using AI Type DBRX and AI Model meta-llama-3-70b-instruct-041824

ROOST_METHOD_HASH=Reset_490cf57a41
ROOST_METHOD_SIG_HASH=Reset_770f8c489b

Here are the pytest test scenarios for the `Reset` method:

Scenario 1: Reset when stopwatch is not running
Details:
  TestName: test_reset_when_not_running
  Description: Verify that the Reset function correctly resets the label text and disables the reset button when the stopwatch is not running.
Execution:
  Arrange: Initialize the label and reset button, set `running` to `False`.
  Act: Call the `Reset` function with the label as an argument.
  Assert: Check that the label text is '00:00:00' and the reset button is disabled.
Validation:
  This test ensures that the Reset function behaves correctly when the stopwatch is not running, resetting the label text and disabling the reset button to prevent further resets.

Scenario 2: Reset when stopwatch is running
Details:
  TestName: test_reset_when_running
  Description: Verify that the Reset function correctly resets the label text when the stopwatch is running.
Execution:
  Arrange: Initialize the label, set `running` to `True`.
  Act: Call the `Reset` function with the label as an argument.
  Assert: Check that the label text is '00:00:00'.
Validation:
  This test ensures that the Reset function behaves correctly when the stopwatch is running, resetting the label text to its initial state.

Scenario 3: Reset when counter is non-zero
Details:
  TestName: test_reset_with_non_zero_counter
  Description: Verify that the Reset function correctly resets the counter to 0.
Execution:
  Arrange: Initialize the label, set `counter` to a non-zero value.
  Act: Call the `Reset` function with the label as an argument.
  Assert: Check that the `counter` is 0.
Validation:
  This test ensures that the Reset function correctly resets the counter to 0, regardless of its previous value.

Scenario 4: Reset with invalid label argument
Details:
  TestName: test_reset_with_invalid_label
  Description: Verify that the Reset function raises an error when passed an invalid label argument.
Execution:
  Arrange: Pass an invalid label argument (e.g., None, string, etc.) to the `Reset` function.
  Act: Call the `Reset` function with the invalid label argument.
  Assert: Check that a `TypeError` or similar exception is raised.
Validation:
  This test ensures that the Reset function is robust and raises an error when passed invalid input, preventing unexpected behavior or crashes.

Scenario 5: Reset when reset button is already disabled
Details:
  TestName: test_reset_when_reset_button_disabled
  Description: Verify that the Reset function does not enable the reset button when it is already disabled.
Execution:
  Arrange: Initialize the label, set `running` to `False`, and disable the reset button.
  Act: Call the `Reset` function with the label as an argument.
  Assert: Check that the reset button remains disabled.
Validation:
  This test ensures that the Reset function does not enable the reset button unnecessarily, maintaining the correct state of the button.
"""

# ********RoostGPT********
import pytest
from stopwatch import Reset
import tkinter as Tkinter

@pytest.mark.smoke
class Test_StopwatchReset:
    def test_reset_when_not_running(self, mocker):
        # Arrange
        label = Tkinter.Label(None, text='00:00:01')
        reset = Tkinter.Button(None, text='Reset', state='normal')
        running = False

        # Act
        Reset(label)

        # Assert
        assert label['text'] == '00:00:00'
        assert reset['state'] == 'disabled'

    def test_reset_when_running(self, mocker):
        # Arrange
        label = Tkinter.Label(None, text='00:00:01')
        running = True

        # Act
        Reset(label)

        # Assert
        assert label['text'] == '00:00:00'

    def test_reset_with_non_zero_counter(self, mocker):
        # Arrange
        label = Tkinter.Label(None, text='00:00:01')
        counter = 10

        # Act
        Reset(label)

        # Assert
        assert counter == 0

    def test_reset_with_invalid_label(self, mocker):
        # Arrange
        label = None

        # Act and Assert
        with pytest.raises(TypeError):
            Reset(label)

    def test_reset_when_reset_button_disabled(self, mocker):
        # Arrange
        label = Tkinter.Label(None, text='00:00:01')
        reset = Tkinter.Button(None, text='Reset', state='disabled')
        running = False

        # Act
        Reset(label)

        # Assert
        assert reset['state'] == 'disabled'
