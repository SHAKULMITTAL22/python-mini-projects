# Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

"""
1. Scenario: Test if the 'clear_data' function can be called multiple times, verifying that the state remains consistent after multiple test runs.

2. Scenario: Test if the 'clear_data' function resets all the values for products or services to 0.

3. Scenario: Test if the 'clear_data' function resets the values for taxes and total prices for the medical, grocery and cold drinks to empty strings.

4. Scenario: Test if the 'clear_data' function clears the customer-related data including name and phone number.

5. Scenario: Confirm that after calling the 'clear_data' function, a new and unique bill number is generated each time.

6. Scenario: Test if the 'clear_data' function resets the search bill to an empty string.

7. Scenario: Test if the 'clear_data' function displays a message box confirming clearance of data and if operation only proceeds after clicking 'Yes'.
   
8. Scenario: Test if the 'welcome_bill' function is called at the end of 'clear_data' function.

9. Scenario: Test that after selecting 'No' in the confirmation alert box, no data values are modified.

10. Scenario: Test if the confirmation message box correctly displays the message "Do you really want to Clear?" and the title "Clear".
"""
import pytest
import tkinter
from unittest.mock import patch, MagicMock
from biling_system import Bill_App


#Create a fixture to instantiate Bill_App and set initial values
@pytest.fixture    
def app():
    root = tkinter.Tk()
    obj = Bill_App(root)
    obj.sanitizer.set(5)
    obj.mask.set(5)
    obj.hand_gloves.set(5)
    obj.medical_price.set("Rs.500")
    obj.medical_tax.set("Rs.25")
    obj.c_name.set("John")
    return obj


def test_multiple_calls(app):    
    for _ in range(3):
        with patch('tkinter.messagebox.askyesno', return_value=True):
            app.clear_data()
            assert app.sanitizer.get() == 0
            assert app.mask.get() == 0
            assert app.hand_gloves.get() == 0
            assert app.medical_price.get() == ""
            assert app.medical_tax.get() == ""    
            assert app.c_name.get() == ""


def test_reset_values(app):
    with patch('tkinter.messagebox.askyesno', return_value=True):
        app.clear_data()
        assert app.sanitizer.get() == 0
        assert app.mask.get() == 0
        assert app.hand_gloves.get() == 0
        assert app.dettol.get() == 0
        assert app.newsprin.get() == 0
        assert app.thermal_gun.get() == 0


def test_reset_price_and_tax(app):
    with patch('tkinter.messagebox.askyesno', return_value=True):
        app.clear_data()
        assert app.medical_price.get() == ""
        assert app.medical_tax.get() == ""


def test_clear_customer_details(app):
    with patch('tkinter.messagebox.askyesno', return_value=True):
        app.clear_data()
        assert app.c_name.get() == ""


def test_generate_unique_bill_no(app):
    with patch('tkinter.messagebox.askyesno', return_value=True):
        old_bill_no = app.bill_no.get()
        app.clear_data()
        assert old_bill_no != app.bill_no.get()


def test_search_bill(app):
    with patch('tkinter.messagebox.askyesno', return_value=True):
        app.clear_data()
        assert app.search_bill.get() == ""


def test_msgbox_proceed_after_yes(app):
    with patch('tkinter.messagebox.askyesno', return_value=True):
        app.clear_data()
    assert tkinter.messagebox.askyesno.called


def test_welcome_bill_called(app):
    with patch('tkinter.messagebox.askyesno', return_value=True):
        with patch.object(app, 'welcome_bill', return_value=None) as mock_welcome_bill:
            app.clear_data()
            mock_welcome_bill.assert_called_once()


def test_msgbox_no_change_after_no(app):
    with patch('tkinter.messagebox.askyesno', return_value=False):
        old_sanitizer = app.sanitizer.get()
        old_mask = app.mask.get()
        app.clear_data()
        assert app.sanitizer.get() == old_sanitizer
        assert app.mask.get() == old_mask


def test_msgbox_display_message(app):
    with patch('tkinter.messagebox.askyesno', return_value=True) as mock_msgbox:
        app.clear_data()
        mock_msgbox.assert_called_once_with("Clear", "Do you really want to Clear?")
