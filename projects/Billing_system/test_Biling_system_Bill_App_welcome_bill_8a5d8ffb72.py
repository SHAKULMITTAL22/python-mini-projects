# Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

"""
Test Scenarios:

1. Happy Path Scenario:
   Confirm that the function correctly outputs the "Welcome Webcode Retail" message, the customer's unique 'Bill Number', 'Customer Name', 'Phone Number', and strings with lines and 'Products', 'QTY' and 'Price'. For confirming this, add data to the text area which should be displayed correctly after calling the function.

2. Empty input Scenario: 
   Verify the response of the function when no previous data is present in the text area. The function should still insert "Welcome Webcode Retail", "================================", and "Products\t\tQTY\t\tPrice" but empty 'Bill Number', 'Customer Name', and 'Phone Number'.

3. Function Execution with Existing Data:
   Before executing 'welcome_bill' function, insert some text data into the 'txtarea' text box, then execute the function. The added text data should be deleted, and the 'welcome_bill' function's output should be displayed correctly.

4. Invalid Bill Number Scenarios:
   - Verify how the function reacts when there's no 'Bill Number' present.
   - Verify how the function reacts when 'Bill Number' is not in expected format.
 
5. Invalid 'Customer Name' and 'Phone Number' Scenarios:
   - Verify how the function reacts when 'Customer Name' variable is empty.
   - Verify how the function reacts when 'Phone Number' is empty.
   - Verify how the function behaves when 'Phone Number' is not in expected format or includes alphabets/special characters.
   
6. Multiple Execution Scenarios:
   - Test the function by calling it multiple times with same or different input arguments. The function should work as expected in both cases.  
   
7. Nonfatal Exception handling: 
   - During the function execution, insert a scenario where exception does not affect the whole system but only the current operation (eg. Null value exception). Verify if the system handles this exception and continues operating.

8. Performance Scenario: 
   - Verify how the function behaves under load. Observe the execution time, CPU usage, memory usage to ensure the function is performant.
   
9. Special Characters in Input:
   - Verify how the function reacts when the 'Customer Name' variable has special characters. 

10. Verify Accessibility and Usability:
    -  Verify that the 'txtarea' is easily readable and accessible, and functions as expected under various system environments or browsers.
"""
import pytest
from tkinter import Tk
from biling_system import Bill_App

# fixture for initializing the class instance for each test
@pytest.fixture()
def bill_app_instance():
    root = Tk()
    obj = Bill_App(root)

    return obj

# Happy path scenario
def test_welcome_bill_happypath(bill_app_instance):
    bill_app_instance.bill_no.set('1234')
    bill_app_instance.c_name.set('John Doe')
    bill_app_instance.c_phone.set('1234567890')
    bill_app_instance.welcome_bill()

    assert bill_app_instance.txtarea.get('1.0', 'end-1c') == ("\tWelcome Webcode Retail"
                                                              "\n Bill Number:1234"
                                                              "\nCustomer Name:John Doe"
                                                              "\nPhone Number1234567890"
                                                              "\n================================"
                                                              "\nProducts\t\tQTY\t\tPrice"
                                                              )

# Empty input scenario
def test_welcome_bill_emptyinputs(bill_app_instance):
    bill_app_instance.bill_no.set('')
    bill_app_instance.c_name.set('')
    bill_app_instance.c_phone.set('')
    bill_app_instance.welcome_bill()

    assert bill_app_instance.txtarea.get('1.0', 'end-1c') == ("\tWelcome Webcode Retail"
                                                              "\n Bill Number:"
                                                              "\nCustomer Name:"
                                                              "\nPhone Number"
                                                              "\n================================"
                                                              "\nProducts\t\tQTY\t\tPrice"
                                                              )
                                                              
# Adding data to the text area before executing function
def test_welcome_bill_existingdata(bill_app_instance):
    bill_app_instance.txtarea.insert('1.0', 'Test Data')
    bill_app_instance.welcome_bill()

    assert bill_app_instance.txtarea.get('1.0', 'end-1c') == ("\tWelcome Webcode Retail"
                                                              "\n Bill Number:"
                                                              "\nCustomer Name:"
                                                              "\nPhone Number"
                                                              "\n================================"
                                                              "\nProducts\t\tQTY\t\tPrice"
                                                              )

# Invalid bill number scenario
def test_welcome_bill_invalidbill(bill_app_instance):
    bill_app_instance.bill_no.set('A123')
    bill_app_instance.welcome_bill()

    assert bill_app_instance.txtarea.get('1.0', 'end-1c') == ("\tWelcome Webcode Retail"
                                                              "\n Bill Number:A123"
                                                              "\nCustomer Name:"
                                                              "\nPhone Number"
                                                              "\n================================"
                                                              "\nProducts\t\tQTY\t\tPrice"
                                                              )

# Customer name and phone number are empty
def test_welcome_bill_emptyfields(bill_app_instance):
    bill_app_instance.bill_no.set('1234')
    bill_app_instance.c_name.set('')
    bill_app_instance.c_phone.set('')
    bill_app_instance.welcome_bill()
                                                            
    assert bill_app_instance.txtarea.get('1.0', 'end-1c') == ("\tWelcome Webcode Retail"
                                                              "\n Bill Number:1234"
                                                              "\nCustomer Name:"
                                                              "\nPhone Number"
                                                              "\n================================"
                                                              "\nProducts\t\tQTY\t\tPrice"
                                                              )

# Phone number is not a number
def test_welcome_bill_phonenumbernotnumber(bill_app_instance):
    bill_app_instance.bill_no.set('1234')
    bill_app_instance.c_name.set('John Doe')
    bill_app_instance.c_phone.set('123A45678')
    bill_app_instance.welcome_bill()

    assert bill_app_instance.txtarea.get('1.0', 'end-1c') == ("\tWelcome Webcode Retail"
                                                              "\n Bill Number:1234"
                                                              "\nCustomer Name:John Doe"
                                                              "\nPhone Number123A45678"
                                                              "\n================================"
                                                              "\nProducts\t\tQTY\t\tPrice"
                                                              )

# TODO: Repeat these tests and assert properly to simulate calling the function multiple times   
# TODO: Test for nonfatal exception handling. Try adding a null value exception
# TODO: Run a performance test to check if the function is able to handle considerable load
# TODO: Test for special characters in the input
# TODO: Verify the accessibility and usability from different system environments or browsers

