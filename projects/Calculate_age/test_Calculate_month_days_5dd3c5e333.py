"""
Test generated by RoostGPT for test python-test using AI Type Open Source AI and AI Model mistralai/Mixtral-8x7B-Instruct-v0.1


Test Scenarios:

1. Test for valid month values 1, 3, 5, 7, 8, 10, 12
2. Test for valid month values 4, 6, 9, 11
3. Test for February month with leap year as true
4. Test for February month with leap year as false
5. Test for invalid month values
6. Test for negative month values
7. Test for non-integer month values
8. Test for leap year as non-boolean value
9. Test for leap year as negative value
10. Test for leap year as non-integer value
"""
import pytest
import calculate


def test_month_days_valid_month_values():
    assert calculate.month_days(1, False) == 31
    assert calculate.month_days(3, False) == 31
    assert calculate.month_days(5, False) == 31
    assert calculate.month_days(7, False) == 31
    assert calculate.month_days(8, False) == 31
    assert calculate.month_days(10, False) == 31
    assert calculate.month_days(12, False) == 31


def test_month_days_valid_month_values_leap_year():
    assert calculate.month_days(1, True) == 31
    assert calculate.month_days(3, True) == 31
    assert calculate.month_days(5, True) == 31
    assert calculate.month_days(7, True) == 31
    assert calculate.month_days(8, True) == 31
    assert calculate.month_days(10, True) == 31
    assert calculate.month_days(12, True) == 31


def test_month_days_february_leap_year():
    assert calculate.month_days(2, True) == 29


def test_month_days_february_non_leap_year():
    assert calculate.month_days(2, False) == 28


def test_month_days_invalid_month_values():
    with pytest.raises(ValueError):
        calculate.month_days(0, False)
    with pytest.raises(ValueError):
        calculate.month_days(13, False)


def test_month_days_negative_month_values():
    with pytest.raises(ValueError):
        calculate.month_days(-1, False)


def test_month_days_non_integer_month_values():
    with pytest.raises(TypeError):
        calculate.month_days(1.1, False)


def test_month_days_leap_year_non_boolean_values():
    with pytest.raises(TypeError):
        calculate.month_days(1, 'True')


def test_month_days_leap_year_negative_values():
    with pytest.raises(ValueError):
        calculate.month_days(1, -1)


def test_month_days_leap_year_non_integer_values():
    with pytest.raises(TypeError):
        calculate.month_days(1, 1.1)


