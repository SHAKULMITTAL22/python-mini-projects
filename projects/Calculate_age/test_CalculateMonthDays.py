# ********RoostGPT********
"""
Test generated by RoostGPT for test python-test using AI Type DBRX and AI Model meta-llama-3-70b-instruct-041824

ROOST_METHOD_HASH=month_days_1396fdc0ba
ROOST_METHOD_SIG_HASH=month_days_5dd3c5e333

Here are the pytest test scenarios for the `month_days` function:

**Scenario 1: January has 31 days**
Details:
  TestName: `test_january_has_31_days`
  Description: Verify that the function returns 31 days for January.
Execution:
  Arrange: None
  Act: `month_days(1, False)`
  Assert: Returned value is 31
Validation: This test ensures the function correctly handles months with 31 days, which is a fundamental aspect of the business logic.

**Scenario 2: February has 28 days in a non-leap year**
Details:
  TestName: `test_february_non_leap_year`
  Description: Verify that the function returns 28 days for February in a non-leap year.
Execution:
  Arrange: None
  Act: `month_days(2, False)`
  Assert: Returned value is 28
Validation: This test ensures the function correctly handles February in a non-leap year, which is a critical edge case.

**Scenario 3: February has 29 days in a leap year**
Details:
  TestName: `test_february_leap_year`
  Description: Verify that the function returns 29 days for February in a leap year.
Execution:
  Arrange: None
  Act: `month_days(2, True)`
  Assert: Returned value is 29
Validation: This test ensures the function correctly handles February in a leap year, which is a critical edge case.

**Scenario 4: April has 30 days**
Details:
  TestName: `test_april_has_30_days`
  Description: Verify that the function returns 30 days for April.
Execution:
  Arrange: None
  Act: `month_days(4, False)`
  Assert: Returned value is 30
Validation: This test ensures the function correctly handles months with 30 days, which is a fundamental aspect of the business logic.

**Scenario 5: Invalid month input**
Details:
  TestName: `test_invalid_month_input`
  Description: Verify that the function raises an error when given an invalid month input.
Execution:
  Arrange: None
  Act: `month_days(13, False)`
  Assert: Raises a `ValueError` or similar error
Validation: This test ensures the function correctly handles invalid input, which is an important error condition.

**Scenario 6: Month input is not an integer**
Details:
  TestName: `test_non_integer_month_input`
  Description: Verify that the function raises an error when given a non-integer month input.
Execution:
  Arrange: None
  Act: `month_days("January", False)`
  Assert: Raises a `TypeError` or similar error
Validation: This test ensures the function correctly handles invalid input, which is an important error condition.

**Scenario 7: Leap year input is not a boolean**
Details:
  TestName: `test_non_boolean_leap_year_input`
  Description: Verify that the function raises an error when given a non-boolean leap year input.
Execution:
  Arrange: None
  Act: `month_days(2, "True")`
  Assert: Raises a `TypeError` or similar error
Validation: This test ensures the function correctly handles invalid input, which is an important error condition.

These scenarios cover the expected behavior, edge cases, and error conditions for the `month_days` function.
"""

# ********RoostGPT********
import pytest
from calculate import month_days
from calendar import isleap
import time

class Test_CalculateMonthDays:

    @pytest.mark.smoke
    @pytest.mark.valid
    def test_january_has_31_days(self):
        assert month_days(1, False) == 31

    @pytest.mark.regression
    @pytest.mark.valid
    def test_february_non_leap_year(self):
        assert month_days(2, False) == 28

    @pytest.mark.regression
    @pytest.mark.valid
    def test_february_leap_year(self):
        assert month_days(2, True) == 29

    @pytest.mark.smoke
    @pytest.mark.valid
    def test_april_has_30_days(self):
        assert month_days(4, False) == 30

    @pytest.mark.negative
    def test_invalid_month_input(self):
        with pytest.raises(ValueError):
            month_days(13, False)

    @pytest.mark.negative
    def test_non_integer_month_input(self):
        with pytest.raises(TypeError):
            month_days("January", False)

    @pytest.mark.negative
    def test_non_boolean_leap_year_input(self):
        with pytest.raises(TypeError):
            month_days(2, "True")
